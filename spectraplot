#! /usr/bin/env python
import pyfits
import matplotlib.pyplot as plt
import argparse

class CalibrationReference:
  def __init__(self, pixel, angstrom):
    self.pixel = pixel
    self.angstrom = angstrom

class Calibration:
  def __init__(self, reference1, reference2):
    self.reference1 = reference1
    self.reference2 = reference2

  def __repr__(self):
    return "<Calibration angstrom_per_pixel: %f, zero_position: x>" % (
        self.angstrom_per_pixel()
    )

  def angstrom(self, pixel):
    return (self.slope() * (pixel - self.reference1.pixel)) + self.reference1.angstrom

  def slope(self):
    return self.angstrom_difference() / self.pixel_difference()

  def angstrom_difference(self):
    return self.reference1.angstrom - self.reference2.angstrom

  def pixel_difference(self):
    return self.reference1.pixel - self.reference2.pixel

  def _calculate_angstrom_per_pixel(self):
    angstrom_range = float(self.reference2.angstrom - self.reference1.angstrom)
    pixel_range = (self.reference2.pixel - self.reference1.pixel)
    return angstrom_range / pixel_range

  def _calculate_zero_position(self):
    return self.reference1.pixel - (self.reference1.angstrom / self.angstrom_per_pixel)

  def angstrom_per_pixel(self):
    return self.slope()



class ElementLine:
  def __init__(self, angstrom, label):
    self.angstrom = angstrom
    self.label = label

  def __repr__(self):
    return "%f (%s)" % (self.angstrom, self.label)


class Reference:
  def __init__(self, reference):
    self.hdulist = pyfits.open(reference)

  def wavelengths(self):
    return self.hdulist[1].data.field(0)

  def intensities(self):
    print self.hdulist[1].data.field(1).max()
    return 800000000000 * self.hdulist[1].data.field(1)


element_lines = {
  'Ha': ElementLine(6563, r'H$\alpha$'),
  'Hb': ElementLine(4861, r'H$\beta$'),
  'Hg': ElementLine(4341, r'H$\gamma$'),
  'CaH': ElementLine(3968, 'Ca H'),
  'CaK': ElementLine(3934, 'Ca K'),
}

parser = argparse.ArgumentParser(description='Process linear SA100 spectra')
parser.add_argument('filename', type=str, help='FITS filename')
parser.add_argument('--calibration', '-c', dest='calibration', type=str,
    help='Calibration pixel position.  Format pixel:angstrom,pixel:angstrom')
parser.add_argument('--lines', '-l', dest='lines', type=str,
                    help='Plot specified lines.')
parser.add_argument('--title', '-t', dest='title', type=str, help='Plot title')
parser.add_argument('--listlines', '-L', action='store_true',
    help='List available lines')
parser.add_argument('--reference', '-r', dest='reference', type=str,
    help='Plot a reference spectra')

args = parser.parse_args()

if args.listlines:
  for k, v in element_lines.iteritems():
    print "%4s %s" % (k, v)
  exit()

hdulist = pyfits.open(args.filename)
print hdulist.info()
sum_data = hdulist[0].data.sum(axis=0)

if args.calibration:
  reference_1, reference_2 = args.calibration.split(',')
  pixel1, angstrom1 = reference_1.split(':')
  pixel2, angstrom2 = reference_2.split(':')

  if angstrom1 in element_lines:
    angstrom1 = element_lines[angstrom1].angstrom
  if angstrom2 in element_lines:
    angstrom2 = element_lines[angstrom2].angstrom

  calibration = Calibration(CalibrationReference(int(pixel1),float(angstrom1)),
                            CalibrationReference(int(pixel2), float(angstrom2)))

  print calibration

  wl = [calibration.angstrom(i) for i in range(len(sum_data))]

  plt.subplot(212)
  plt.xlabel('x px')
  plt.ylabel('y px')
  imgplot = plt.imshow(hdulist[0].data)
  imgplot.set_cmap('gray')

  plt.subplot(211)
  plt.xlabel(r'Wavelength ($\AA$)')
  plt.ylabel('Relative intensity')
  plt.plot(wl, sum_data)

  if args.lines:
    lines_to_plot = args.lines.split(',')

    for line_to_plot in lines_to_plot:
      line = element_lines[line_to_plot]
      plt.axvline(x=line.angstrom, color='red')
      plt.text(line.angstrom, 10, '%s (%.02f $\AA$)' % (line.label, line.angstrom),
          rotation='vertical', verticalalignment='bottom')

  plt.axvline(x=0, color='yellow')

  if args.reference:
    reference = Reference(args.reference)
    print reference.intensities()
    plt.plot(reference.wavelengths(), reference.intensities())

else:
  plt.subplot(212)
  plt.xlabel('x px')
  plt.ylabel('y px')
  imgplot = plt.imshow(hdulist[0].data)
  imgplot.set_cmap('gray')

  plt.subplot(211)
  plt.xlabel('Pixel')
  plt.ylabel('Relative intensity')
  plt.plot(sum_data)
  

if args.title:
  title = args.title
else:
  title = args.filename

plt.title(title)

plt.show()
